//
//  StyleKit.swift
//  XKCD
//
//  Created by David Taylor on 2/24/18.
//  Copyright Â© 2018 David Taylor. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfNextButton: UIImage?
        static var nextButtonTargets: [AnyObject]?
        static var imageOfPreviousButton: UIImage?
        static var previousButtonTargets: [AnyObject]?
        static var imageOfInfoButton: UIImage?
        static var infoButtonTargets: [AnyObject]?
        static var imageOfInfoBackground: UIImage?
        static var infoBackgroundTargets: [AnyObject]?
        static var imageOfCloseInfoButton: UIImage?
        static var closeInfoButtonTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawNextButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 70)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 70, resizedFrame.height / 70)


        //// Color Declarations
        let color = UIColor(red: 0.373, green: 0.882, blue: 0.353, alpha: 0.784)
        let color2 = UIColor(red: 0.557, green: 0.557, blue: 0.557, alpha: 0.502)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.lightGray.withAlphaComponent(0.6)
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 5

        //// Group
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 60, height: 60))
        color2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 29.48, y: 8.49))
        bezierPath.addCurve(to: CGPoint(x: 21.98, y: 15.98), controlPoint1: CGPoint(x: 29.48, y: 8.48), controlPoint2: CGPoint(x: 26.22, y: 11.75))
        bezierPath.addCurve(to: CGPoint(x: 41, y: 35), controlPoint1: CGPoint(x: 29.82, y: 23.82), controlPoint2: CGPoint(x: 41, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 21.98, y: 54.02), controlPoint1: CGPoint(x: 41, y: 35), controlPoint2: CGPoint(x: 29.82, y: 46.18))
        bezierPath.addCurve(to: CGPoint(x: 29.48, y: 61.52), controlPoint1: CGPoint(x: 26.22, y: 58.25), controlPoint2: CGPoint(x: 29.48, y: 61.52))
        bezierPath.addLine(to: CGPoint(x: 56, y: 35))
        bezierPath.addLine(to: CGPoint(x: 29.48, y: 8.48))
        bezierPath.addLine(to: CGPoint(x: 29.48, y: 8.49))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPreviousButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 70), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 70)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 70, resizedFrame.height / 70)


        //// Color Declarations
        let color = UIColor(red: 0.373, green: 0.882, blue: 0.353, alpha: 0.784)
        let color2 = UIColor(red: 0.557, green: 0.557, blue: 0.557, alpha: 0.502)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.lightGray.withAlphaComponent(0.6)
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 5

        //// Group
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 60, height: 60))
        color2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 40.52, y: 8.49))
        bezierPath.addCurve(to: CGPoint(x: 48.02, y: 15.98), controlPoint1: CGPoint(x: 40.52, y: 8.48), controlPoint2: CGPoint(x: 43.78, y: 11.75))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 35), controlPoint1: CGPoint(x: 40.18, y: 23.82), controlPoint2: CGPoint(x: 29, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 48.02, y: 54.02), controlPoint1: CGPoint(x: 29, y: 35), controlPoint2: CGPoint(x: 40.18, y: 46.18))
        bezierPath.addCurve(to: CGPoint(x: 40.52, y: 61.52), controlPoint1: CGPoint(x: 43.78, y: 58.25), controlPoint2: CGPoint(x: 40.52, y: 61.52))
        bezierPath.addLine(to: CGPoint(x: 14, y: 35))
        bezierPath.addLine(to: CGPoint(x: 40.52, y: 8.48))
        bezierPath.addLine(to: CGPoint(x: 40.52, y: 8.49))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLoading(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit, angle: CGFloat = 166) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 100, y: 100)
        context.rotate(by: -angle * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.97, y: -100))
        bezierPath.addLine(to: CGPoint(x: -1.21, y: -100))
        bezierPath.addCurve(to: CGPoint(x: 0.97, y: -100), controlPoint1: CGPoint(x: -0.46, y: -100.01), controlPoint2: CGPoint(x: 0.26, y: -100.01))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 63.29, y: -77.43))
        bezierPath.addCurve(to: CGPoint(x: 59.76, y: -73.9), controlPoint1: CGPoint(x: 62.23, y: -76.37), controlPoint2: CGPoint(x: 61.05, y: -75.19))
        bezierPath.addCurve(to: CGPoint(x: 56.18, y: -70.32), controlPoint1: CGPoint(x: 58.64, y: -72.79), controlPoint2: CGPoint(x: 57.45, y: -71.59))
        bezierPath.addCurve(to: CGPoint(x: 10, y: -89.44), controlPoint1: CGPoint(x: 43.32, y: -80.62), controlPoint2: CGPoint(x: 27.5, y: -87.49))
        bezierPath.addCurve(to: CGPoint(x: 10, y: -99.5), controlPoint1: CGPoint(x: 10, y: -94.72), controlPoint2: CGPoint(x: 10, y: -98.25))
        bezierPath.addCurve(to: CGPoint(x: 63.29, y: -77.43), controlPoint1: CGPoint(x: 30.29, y: -97.47), controlPoint2: CGPoint(x: 48.58, y: -89.48))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -10, y: -89.46))
        bezierPath.addCurve(to: CGPoint(x: -56.42, y: -70.12), controlPoint1: CGPoint(x: -27.33, y: -87.54), controlPoint2: CGPoint(x: -43.34, y: -80.64))
        bezierPath.addCurve(to: CGPoint(x: -63.52, y: -77.23), controlPoint1: CGPoint(x: -59.29, y: -72.99), controlPoint2: CGPoint(x: -61.69, y: -75.39))
        bezierPath.addCurve(to: CGPoint(x: -10, y: -99.52), controlPoint1: CGPoint(x: -48.57, y: -89.53), controlPoint2: CGPoint(x: -30.06, y: -97.52))
        bezierPath.addCurve(to: CGPoint(x: -10, y: -89.46), controlPoint1: CGPoint(x: -10, y: -98.29), controlPoint2: CGPoint(x: -10, y: -94.75))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -70.52, y: -55.94))
        bezierPath.addCurve(to: CGPoint(x: -89.44, y: -10), controlPoint1: CGPoint(x: -80.7, y: -43.12), controlPoint2: CGPoint(x: -87.51, y: -27.39))
        bezierPath.addLine(to: CGPoint(x: -99.5, y: -10))
        bezierPath.addCurve(to: CGPoint(x: -93.02, y: -36.77), controlPoint1: CGPoint(x: -98.56, y: -19.41), controlPoint2: CGPoint(x: -96.33, y: -28.38))
        bezierPath.addCurve(to: CGPoint(x: -77.63, y: -63.05), controlPoint1: CGPoint(x: -89.23, y: -46.38), controlPoint2: CGPoint(x: -84, y: -55.22))
        bezierPath.addCurve(to: CGPoint(x: -70.52, y: -55.94), controlPoint1: CGPoint(x: -75.79, y: -61.21), controlPoint2: CGPoint(x: -73.39, y: -58.81))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 99.52, y: -10))
        bezierPath.addLine(to: CGPoint(x: 89.46, y: -10))
        bezierPath.addCurve(to: CGPoint(x: 70.32, y: -56.17), controlPoint1: CGPoint(x: 87.55, y: -27.23), controlPoint2: CGPoint(x: 80.73, y: -43.15))
        bezierPath.addCurve(to: CGPoint(x: 77.43, y: -63.29), controlPoint1: CGPoint(x: 73.05, y: -58.9), controlPoint2: CGPoint(x: 75.44, y: -61.3))
        bezierPath.addCurve(to: CGPoint(x: 99.52, y: -10), controlPoint1: CGPoint(x: 89.62, y: -48.37), controlPoint2: CGPoint(x: 97.53, y: -29.95))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 100, y: -1.18))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 0.95), controlPoint1: CGPoint(x: 100.01, y: -0.47), controlPoint2: CGPoint(x: 100.01, y: 0.24))
        bezierPath.addCurve(to: CGPoint(x: 100, y: -1.18), controlPoint1: CGPoint(x: 100, y: 0.24), controlPoint2: CGPoint(x: 100, y: -0.47))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -100, y: -0.96))
        bezierPath.addCurve(to: CGPoint(x: -100, y: 1.21), controlPoint1: CGPoint(x: -100, y: -0.24), controlPoint2: CGPoint(x: -100, y: 0.49))
        bezierPath.addCurve(to: CGPoint(x: -100, y: -0.96), controlPoint1: CGPoint(x: -100.01, y: 0.49), controlPoint2: CGPoint(x: -100.01, y: -0.24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -89.46, y: 10))
        bezierPath.addCurve(to: CGPoint(x: -78.2, y: 44.56), controlPoint1: CGPoint(x: -88.09, y: 22.39), controlPoint2: CGPoint(x: -84.17, y: 34.11))
        bezierPath.addCurve(to: CGPoint(x: -70.32, y: 56.17), controlPoint1: CGPoint(x: -75.88, y: 48.64), controlPoint2: CGPoint(x: -73.24, y: 52.52))
        bezierPath.addCurve(to: CGPoint(x: -77.43, y: 63.29), controlPoint1: CGPoint(x: -73.05, y: 58.9), controlPoint2: CGPoint(x: -75.44, y: 61.3))
        bezierPath.addCurve(to: CGPoint(x: -84.79, y: 53.02), controlPoint1: CGPoint(x: -80.09, y: 60.03), controlPoint2: CGPoint(x: -82.55, y: 56.6))
        bezierPath.addCurve(to: CGPoint(x: -99.52, y: 10), controlPoint1: CGPoint(x: -92.8, y: 40.25), controlPoint2: CGPoint(x: -97.97, y: 25.59))
        bezierPath.addLine(to: CGPoint(x: -89.46, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 89.44, y: 10))
        bezierPath.addLine(to: CGPoint(x: 99.5, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 77.24, y: 63.53), controlPoint1: CGPoint(x: 97.45, y: 30.4), controlPoint2: CGPoint(x: 89.39, y: 48.78))
        bezierPath.addCurve(to: CGPoint(x: 70.13, y: 56.42), controlPoint1: CGPoint(x: 75.5, y: 61.8), controlPoint2: CGPoint(x: 73.09, y: 59.39))
        bezierPath.addCurve(to: CGPoint(x: 89.44, y: 10), controlPoint1: CGPoint(x: 80.53, y: 43.52), controlPoint2: CGPoint(x: 87.48, y: 27.61))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: -10, y: 89.44))
        bezierPath.addCurve(to: CGPoint(x: -10, y: 99.5), controlPoint1: CGPoint(x: -10, y: 94.72), controlPoint2: CGPoint(x: -10, y: 98.25))
        bezierPath.addCurve(to: CGPoint(x: -63.29, y: 77.43), controlPoint1: CGPoint(x: -30.29, y: 97.46), controlPoint2: CGPoint(x: -48.58, y: 89.48))
        bezierPath.addCurve(to: CGPoint(x: -56.18, y: 70.32), controlPoint1: CGPoint(x: -61.3, y: 75.44), controlPoint2: CGPoint(x: -58.91, y: 73.05))
        bezierPath.addCurve(to: CGPoint(x: -10, y: 89.44), controlPoint1: CGPoint(x: -43.32, y: 80.62), controlPoint2: CGPoint(x: -27.5, y: 87.49))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 63.04, y: 77.62))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 99.52), controlPoint1: CGPoint(x: 48.18, y: 89.7), controlPoint2: CGPoint(x: 29.84, y: 97.55))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 89.46), controlPoint1: CGPoint(x: 10, y: 98.29), controlPoint2: CGPoint(x: 10, y: 94.75))
        bezierPath.addCurve(to: CGPoint(x: 55.93, y: 70.51), controlPoint1: CGPoint(x: 27.12, y: 87.56), controlPoint2: CGPoint(x: 42.95, y: 80.81))
        bezierPath.addCurve(to: CGPoint(x: 63.04, y: 77.62), controlPoint1: CGPoint(x: 58.89, y: 73.47), controlPoint2: CGPoint(x: 61.3, y: 75.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 1.17, y: 100))
        bezierPath.addCurve(to: CGPoint(x: -0.97, y: 100), controlPoint1: CGPoint(x: 0.43, y: 100.01), controlPoint2: CGPoint(x: -0.27, y: 100.01))
        bezierPath.addCurve(to: CGPoint(x: 1.17, y: 100), controlPoint1: CGPoint(x: -0.97, y: 100), controlPoint2: CGPoint(x: 0.88, y: 100))
        bezierPath.close()
        UIColor.gray.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawInfoButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 50, resizedFrame.height / 50)


        //// Color Declarations
        let color2 = UIColor(red: 0.557, green: 0.557, blue: 0.557, alpha: 0.502)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.lightGray.withAlphaComponent(0.6)
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 5

        //// Group
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 40, height: 40))
        color2.setFill()
        ovalPath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 19, y: 15, width: 13, height: 19)
        let textTextContent = "i"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 24),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawInfoBackground(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 210, height: 130), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 210, height: 130), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 210, y: resizedFrame.height / 130)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 210, resizedFrame.height / 130)


        //// Color Declarations
        let color2 = UIColor(red: 0.557, green: 0.557, blue: 0.557, alpha: 0.502)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.lightGray.withAlphaComponent(0.6)
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 5

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 5, y: 5, width: 200, height: 120), cornerRadius: 5)
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        color2.setFill()
        rectanglePath.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCloseInfoButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 32, resizedFrame.height / 32)



        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.lightGray.withAlphaComponent(0.6)
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 5

        //// Group
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text Drawing
        let textRect = CGRect(x: 9, y: 7, width: 15, height: 18)
        let textTextContent = "X"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 20),
            .foregroundColor: UIColor.red,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfNextButton: UIImage {
        if Cache.imageOfNextButton != nil {
            return Cache.imageOfNextButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 70, height: 70), false, 0)
            StyleKit.drawNextButton()

        Cache.imageOfNextButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfNextButton!
    }

    @objc dynamic public class var imageOfPreviousButton: UIImage {
        if Cache.imageOfPreviousButton != nil {
            return Cache.imageOfPreviousButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 70, height: 70), false, 0)
            StyleKit.drawPreviousButton()

        Cache.imageOfPreviousButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPreviousButton!
    }

    @objc dynamic public class func imageOfLoading(angle: CGFloat = 166) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
            StyleKit.drawLoading(angle: angle)

        let imageOfLoading = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfLoading
    }

    @objc dynamic public class var imageOfInfoButton: UIImage {
        if Cache.imageOfInfoButton != nil {
            return Cache.imageOfInfoButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            StyleKit.drawInfoButton()

        Cache.imageOfInfoButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfInfoButton!
    }

    @objc dynamic public class var imageOfInfoBackground: UIImage {
        if Cache.imageOfInfoBackground != nil {
            return Cache.imageOfInfoBackground!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 210, height: 130), false, 0)
            StyleKit.drawInfoBackground()

        Cache.imageOfInfoBackground = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfInfoBackground!
    }

    @objc dynamic public class var imageOfCloseInfoButton: UIImage {
        if Cache.imageOfCloseInfoButton != nil {
            return Cache.imageOfCloseInfoButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            StyleKit.drawCloseInfoButton()

        Cache.imageOfCloseInfoButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCloseInfoButton!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var nextButtonTargets: [AnyObject]! {
        get { return Cache.nextButtonTargets }
        set {
            Cache.nextButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfNextButton)
            }
        }
    }

    @objc @IBOutlet dynamic var previousButtonTargets: [AnyObject]! {
        get { return Cache.previousButtonTargets }
        set {
            Cache.previousButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfPreviousButton)
            }
        }
    }

    @objc @IBOutlet dynamic var infoButtonTargets: [AnyObject]! {
        get { return Cache.infoButtonTargets }
        set {
            Cache.infoButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfInfoButton)
            }
        }
    }

    @objc @IBOutlet dynamic var infoBackgroundTargets: [AnyObject]! {
        get { return Cache.infoBackgroundTargets }
        set {
            Cache.infoBackgroundTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfInfoBackground)
            }
        }
    }

    @objc @IBOutlet dynamic var closeInfoButtonTargets: [AnyObject]! {
        get { return Cache.closeInfoButtonTargets }
        set {
            Cache.closeInfoButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfCloseInfoButton)
            }
        }
    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
